<% include usersLayout/header.ejs %>
<div class="main">
    <% include usersLayout/nav.ejs %>
    <div class="container-fluid">
        <div class="page-title">
            <h1>用户</h1>
        </div>
        <!-- 有错误信息时展示 -->
        <!-- <div class="alert alert-danger">
        <strong>错误！</strong>发生XXX错误
      </div> -->
        <div class="row">
            <div class="col-md-4">
                <form id="form">
                    <h2>添加新用户</h2>
                    <div class="form-group">
                        <label for="email">邮箱</label>
                        <input id="email" class="form-control" name="email" type="email" placeholder="邮箱">
                    </div>
                    <div class="form-group">
                        <label for="slug">别名</label>
                        <input id="slug" class="form-control" name="slug" type="text" placeholder="slug">
                        <p class="help-block">https://zce.me/author/<strong>slug</strong></p>
                    </div>
                    <div class="form-group">
                        <label for="nickname">昵称</label>
                        <input id="nickname" class="form-control" name="nickname" type="text" placeholder="昵称">
                    </div>
                    <div class="form-group">
                        <label for="password">密码</label>
                        <input id="password" class="form-control" name="password" type="password" placeholder="密码">
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary" type="submit">添加</button>
                    </div>
                </form>
            </div>
            <div class="col-md-8">
                <div class="page-action">
                    <!-- show when multiple checked -->
                    <a id="delallBtn" class="btn btn-danger btn-sm" href="javascript:;" style="display: none">批量删除</a>
                </div>
                <!--批量删除需要的form表单-->
                <!--写在tbody外面的原因是因为 渲染的时候是使用$('tbody').html()-->
                <!--写在table外面的原因是因为 写在tbody的时候 发现静态渲染的时候 form标签没有把tbody包含在内-->
                <form id="tableForm">
                    <table class="table table-striped table-bordered table-hover">
                        <thead>
                            <tr>
                                <th class="text-center" width="40"><input type="checkbox" id="checkAll"></th>
                                <th class="text-center" width="80">头像</th>
                                <th>邮箱</th>
                                <th>别名</th>
                                <th>昵称</th>
                                <th>状态</th>
                                <th class="text-center" width="100">操作</th>
                            </tr>
                        </thead>
                        <tbody id="tbody">
                            <% for(var i = 0; i < result.length; i++) { %>
                                <tr>
                                    <td class="text-center"><input class="checkitem" name="id"
                                                                   value="<%= result[i].id %>"
                                                                   type="checkbox">
                                    </td>
                                    <!--使用三元表达式的方法 目的是在没有上传图片的时候 也会有对应替代的默认图片-->
                                    <td class="text-center"><img class="avatar"
                                                                 src="<%= result[i].avatar ? result[i].avatar : '../assets/img/default.png' %>">
                                    </td>
                                    <td><%= result[i].email %></td>
                                    <td><%= result[i].slug %></td>
                                    <td><%= result[i].nickname %></td>
                                    <td>激活</td>
                                    <td class="text-center">
                                        <a href="post-add.php" id="<%= result[i].id %>"
                                           class="btn btn-default btn-xs">编辑</a>
                                        <a href="javascript:;" id="<%= result[i].id %>"
                                           class="btn btn-danger btn-xs">删除</a>
                                    </td>
                                </tr>
                            <% } %>
                        </tbody>
                    </table>
                </form>
            </div>
        </div>
    </div>
</div>


<% include usersLayout/aside.ejs %>
<% include usersLayout/footer.ejs %>
<!--在footer中已经引入了模板引擎-->

<!--渲染用户列表的模板-->
<script id="tmp" type="text/html">
    {{ each data }}
    <tr>
        <td class="text-center"><input type="checkbox" class="checkitem" name="id" value="{{ $value.id }}"></td>
        <!--使用三元表达式的方法 目的是在没有上传图片的时候 也会有对应替代的默认图片-->
        <td class="text-center"><img class="avatar" src="{{$value.avatar?$value.avatar:'../assets/img/default.png'}}">
        </td>
        <td>{{$value.email}}</td>
        <td>{{$value.slug}}</td>
        <td>{{$value.nickname}}</td>
        <td>激活</td>
        <td class="text-center">
            <a href="post-add.php" id="{{$value.id}}" class="btn btn-default btn-xs">编辑</a>
            <a href="javascript:;" id="{{$value.id}}" class="btn btn-danger btn-xs">删除</a>
        </td>
    </tr>
    {{ /each }}
</script>
<!--修改模板-->
<script id="edit" type="text/html">
    <form id="form">
        <h2>修改新用户</h2>
        <!--需告诉服务器修改对应的id-->
        <input type="hidden" name="id" value="{{ id }}">
        <div class="form-group">
            <label for="email">邮箱</label>
            <input id="email" class="form-control" value="{{ email }}" name="email" type="email" placeholder="邮箱">
        </div>
        <!--别名有唯一性 不允许修改-->
        <div class="form-group">
            <label for="slug">别名</label>
            <input id="slug" disabled class="form-control" value="{{ slug }}" name="slug" type="text"
                   placeholder="slug">
            <p class="help-block">https://zce.me/author/<strong>slug</strong></p>
        </div>
        <div class="form-group">
            <label for="nickname">昵称</label>
            <input id="nickname" class="form-control" value="{{ nickname }}" name="nickname" type="text"
                   placeholder="昵称">
        </div>
        <div class="form-group">
            <label for="password">密码</label>
            <input id="password" class="form-control" value="{{ password }}" name="password" type="password"
                   placeholder="密码">
        </div>
        <div class="form-group">
            <button class="btn btn-primary" id="editHandler">修改</button>
        </div>
    </form>
</script>
<!--添加模板-->
<script id="addForm" type="text/html">
    <h2>添加新用户</h2>
    <div class="form-group">
        <label for="email">邮箱</label>
        <input id="email" class="form-control" name="email" type="email" placeholder="邮箱">
    </div>
    <div class="form-group">
        <label for="slug">别名</label>
        <input id="slug" class="form-control" name="slug" type="text" placeholder="slug">
        <p class="help-block">https://zce.me/author/<strong>slug</strong></p>
    </div>
    <div class="form-group">
        <label for="nickname">昵称</label>
        <input id="nickname" class="form-control" name="nickname" type="text" placeholder="昵称">
    </div>
    <div class="form-group">
        <label for="password">密码</label>
        <input id="password" class="form-control" name="password" type="password" placeholder="密码">
    </div>
    <div class="form-group">
        <button class="btn btn-primary" type="submit">添加</button>
    </div>
</script>


<script>
    //使用事件委托 给添加按钮注册一个点击事件
    $('#form').on('click', 'button[type="submit"]', function (e) {
        e.preventDefault();

        //新方法:获取参数 jQuery的form对象中有一个serialize方法
        //email=751359974%40qq.com&slug=kris&nickname=kxs&password=123
        //console.log($('#form').serialize());

        $.ajax({
            url: '/postAddUsers',
            method: 'post',
            data: $('#form').serialize(),
            dataType: 'JSON',
            success: result => {
                //解构赋值
                let {status, msg} = result;
                if (status === 200) {
                    alert(msg);

                    //再重新渲染页面
                    getAllUsers();

                    //清空文本框
                    $('#email').val('');
                    $('#slug').val('');
                    $('#nickname').val('');
                    $('#password').val('');
                } else if (status === 304) {  //如果返回的status 是 304,说明是isXhrLogin方法在控制器被调用 并且是未进行身份验证 导致调用后 返回值是true
                    alert(msg);
                    window.location = '/login';
                } else {
                    alert(msg);
                }
            }
        })
    });

    //封装一个方法专门用来渲染用户列表中的数据
    function getAllUsers() {
        $.ajax({
            url: '/getAllUsers',
            method: 'get',
            dataType: 'JSON',
            success: result => {
                // console.log(result);
                let {status, msg} = result;
                if (status === 200) {
                    let html = template('tmp', result);
                    $('#tbody').html(html);
                } else if (status === 304) {  //如果返回的status 是 304,说明是isXhrLogin方法在控制器被调用 并且是未进行身份验证 导致调用后 返回值是true
                    alert(msg);
                    window.location = '/login';
                } else {
                    alert(msg);
                }
            }
        })
    }

    //给删除按钮绑定点击事件(事件委托)
    $('#tbody').on('click', 'a.btn-danger', function () {
        //获取参数
        let id = $(this).attr('id');

        if (confirm('您确定要删除吗?')) {
            $.ajax({
                //三种传参的方式
                url: '/delUser?id=' + id,
                method: 'get',
                // data: {
                //     id: id
                // },
                // data: `id=` + id,
                success: result => {
                    let {status, msg} = result;
                    if (status === 200) {
                        alert(msg);

                        //删除成功后更新数据
                        getAllUsers();
                    } else if (status === 304) {
                        //如果返回的status 是 304,说明是isXhrLogin方法在控制器被调用 并且是未进行身份验证 导致调用后 返回值是true
                        alert(msg);
                        window.location = '/login';
                    } else {
                        alert(msg);
                    }
                }
            })
        }
    });

    //给编辑按钮绑定点击事件(使用事件委托) 好处:不必一个个去处理
    $('#tbody').on('click', '.btn-default', function (e) {
        e.preventDefault();

        //接收参数
        let id = $(this).attr('id');

        $.ajax({
            url: '/getEdituser',
            method: 'get',
            data: 'id=' + id,
            success: result => {
                let {status, data, msg} = result;
                if (status === 200) {
                    let html = template('edit', data);
                    $('#form').html(html);
                } else if (status === 304) {  //如果返回的status 是 304,说明是isXhrLogin方法在控制器被调用 并且是未进行身份验证 导致调用后 返回值是true
                    alert(msg);
                    window.location = '/login';
                } else {
                    alert(msg);
                }

            }
        })


    });

    //为修改按钮注册一个点击事件(使用事件委托) 好处:可以使用form对象的新方法 方便的获得参数
    //注意:第一步为添加按钮注册点击事件 此时也会影响到这个修改按钮 所以修改按钮要有一个唯一标识 并且需要删除为添加按钮注册事件的条件
    $('#form').on('click', '#editHandler', function (e) {
        e.preventDefault();

        $.ajax({
            url: '/postEditUser',
            method: 'post',
            data: $('#form').serialize(),
            success: result => {
                let {status, msg} = result;
                if (status === 200) {
                    alert(msg);
                    //重新渲染页面
                    getAllUsers();
                    //并且渲染回默认的添加 表单
                    let html = template('addForm', {});
                    $('#form').html(html);

                } else if (status === 304) {  //如果返回的status 是 304,说明是isXhrLogin方法在控制器被调用 并且是未进行身份验证 导致调用后 返回值是true
                    alert(msg);
                    window.location = '/login';
                } else {
                    alert(msg);
                }
            }
        })
    })

    //1.点击表头中的全选框：所有选项的多选框都应该被选中，并显示一个批量删除的按钮
    $('#checkAll').on('click', function () {
        //注意服务器渲染 和 浏览器渲染的多选框 都要设置
        //设置所有多选框的选中状态
        $('.checkitem').prop('checked', $(this).prop('checked'));

        //设置批量删除按钮的显示与隐藏
        $(this).prop('checked') ? $('#delallBtn').show() : $('#delallBtn').hide();
    });

    //2.如果同时选中了两个多选框，显示批量删除；
    //使用事件委托 老大: tbody
    $('#tbody').on('click', '.checkitem', function () {

        let checkCount = 0;//声明一个变量 记录所有多选框为true的个数

        $('.checkitem').each((key, ele) => {
            // console.log(key); //元素的索引
            //console.log(ele); //ele为每个元素 dom对象

            let result = $(ele).prop('checked'); //获取每个多选框的选中状态
            if (result) {
                checkCount++;
            }
        })
        // console.log(checkCount);
        // 多选框选中两个及以上 就显示批量删除按钮
        checkCount >= 2 ? $('#delallBtn').show() : $('#delallBtn').hide();

        //3.如果所有的多选框被选中，表头中的全选框也要被选中
        let checkitemLength = $('.checkitem').length;
        //如果选中的个数等于 多选框的总个数 则表头中的全选框也选中
        checkCount === checkitemLength ? $('#checkAll').prop('checked', true) : $('#checkAll').prop('checked', false);
    });


    //3.为批量删除按钮注册点击事件
    $('#delallBtn').on('click', () => {
        // console.log($('#tableForm').serialize()); //id=2&id=14

        //使用异步对象发送post请求
        $.ajax({
            url: '/delUsers',
            method: 'post',
            data: $('#tableForm').serialize(),
            success: result => {
                let {status, msg} = result;
                if (status === 200) {
                    alert(msg);

                    //重新渲染
                    getAllUsers();
                } else if (status === 304) {  //如果返回的status 是 304,说明是isXhrLogin方法在控制器被调用 并且是未进行身份验证 导致调用后 返回值是true
                    alert(msg);
                    window.location = '/login';
                } else {
                    alert(msg);
                }
            }
        })
    });

</script>